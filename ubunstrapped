#!/bin/sh
VERSION_NUMBER=0.1.0

usage() {
cat << EOF
Usage: ubunstrapped [OPTIONS] server-ip

Options:
    -u, --user      User to login as
    -h, --help      Show this message
    -v, --version   Show version
EOF
}

# Change long options to short
for arg
do
  delim=""
  case "$arg" in
    --user) args="${args}-u ";;
    --help) args="${args}-h ";;
    --version) args="${args}-v ";;
    *) [[ "${arg:0:1}" == "-" ]] || delim="\""
      args="${args}${delim}${arg}${delim} ";;
  esac
done
eval set -- $args

# Parse command line options.
while getopts "hvu:" option; do
  case "$option" in
    u) 
      SERVER_USER=$OPTARG;;
    h)
      usage
      exit 0;;
    v)
      echo "`basename $0` $VERSION_NUMBER"
      exit 0;;
    # getopts issues an error message
    \?)
      usage >&2
      exit 1;;
  esac
done

# Remove the switches we parsed above.
shift `expr $OPTIND - 1`

# We want at least one non-option argument.
if [ $# -eq 0 ]; then
    usage >&2
    exit 1
fi

# Access additional arguments as usual through
# variables $@, $*, $1, $2, etc. or using this loop:
SERVER=$1

# Set user to root if one wasn't specified
if [ ! -n "$SERVER_USER" ]; then
    SERVER_USER="root"
fi

# Set user home directory
if [ $SERVER_USER == "root" ]; then
  USER_HOME="/root"
else
  USER_HOME="/home/$SERVER_USER"
fi

# add keys to server to prevent most password requests
scp ~/.ssh/id_rsa.pub $SERVER_USER@$SERVER:/tmp/$USER.pub
ssh $SERVER_USER@$SERVER "cat /tmp/$USER.pub >>  $USER_HOME/.ssh/authorized_keys;"

# login as root and change the password
echo "Change the root user's password..."
ssh $SERVER_USER@$SERVER 'passwd;'

# add the wheel group
ssh $SERVER_USER@$SERVER "/usr/sbin/groupadd wheel; echo '%wheel  ALL=(ALL)  ALL' >> /etc/sudoers;"

# add a new user
read -e -p "Add a user. Enter a new username: " NEW_SERVER_USER
ssh $SERVER_USER@$SERVER "mkdir /home/$NEW_SERVER_USER;/usr/sbin/useradd -d /home/$NEW_SERVER_USER $NEW_SERVER_USER;passwd $NEW_SERVER_USER;/usr/sbin/usermod -a -G wheel $NEW_SERVER_USER;" 

# update aptitude
echo "Running system updates..."
ssh $SERVER_USER@$SERVER "sudo aptitude update; sudo aptitude safe-upgrade; sudo aptitude install build-essential;"

# install software
# git
ssh $SERVER_USER@$SERVER "sudo apt-get install git-core;"

# nginx
ssh $SERVER_USER@$SERVER "nginx=stable; echo 'deb http://ppa.launchpad.net/nginx/stable/ubuntu lucid main' > /etc/apt/sources.list.d/nginx-stable-lucid.list; apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C300EE8C; apt-get update; apt-get install nginx; sudo nginx;"

# don't allow root login via ssh
ssh $SERVER_USER@$SERVER "sed -i 's/PermitRootLogin yes/PermitRootLogin no/gI' /etc/ssh/sshd_config"

# set iptables
ssh $SERVER_USER@$SERVER 'cat > /etc/iptables.up.rules << EOF
*filter

#  Allows all loopback (lo0) traffic and drop all traffic to 127/8 that does not use lo0
-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT


#  Accepts all established inbound connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT


#  Allows all outbound traffic
#  You can modify this to only allow certain traffic
-A OUTPUT -j ACCEPT 


# Allows HTTP and HTTPS connections from anywhere (the normal ports for websites)
-A INPUT -p tcp --dport 22 -j ACCEPT
-A INPUT -p tcp --dport 80 -j ACCEPT
-A INPUT -p tcp --dport 443 -j ACCEPT

# Allow ping
-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT


# log iptables denied calls
-A INPUT -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7


# Reject all other inbound - default deny unless explicitly allowed policy
-A INPUT -j REJECT
-A FORWARD -j REJECT

COMMIT
EOF'

ssh $SERVER_USER@$SERVER "cat > /etc/network/if-pre-up.d/iptables << EOF
#!/bin/sh
/sbin/iptables-restore < /etc/iptables.up.rules
EOF"

# before reloading, echo all info you might want to remember
echo "---------------------- Finished! ------------------------"
echo "Server: $SERVER"
echo "Created user: $NEW_SERVER_USER"

# reload and end session
ssh $SERVER_USER@$SERVER "chmod +x /etc/network/if-pre-up.d/iptables; /sbin/iptables-restore < /etc/iptables.up.rules;service ssh reload;"
